name: CI/CD PIPELINE

env:
  IS_BETA: true
  PROJECT_NAME: Sweaj.Patterns
  TEST_PROJECT_NAME: Sweaj.Patterns.Tests
  PROJECT_FILE: src/Sweaj.Patterns/Sweaj.Patterns.csproj
  TEST_PROJECT_FILE: tests/Sweaj.Patterns.Tests/Sweaj.Patterns.Tests.csproj
  DOTNET_VERSION: 8.0.x
  BUILD_CONFIGURATION: Release
  PACKAGE_DIRECTORY: nuget/
  NUGET_REPOSITORY_URL: https://api.nuget.org/v3/index.json
  SWEAJ_NUGET_KEY: ${{ secrets.SWEAJ_NUGET_KEY }}

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET Core SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: RESTORE DEPENDENCIES
      run: dotnet restore ${{ env.PROJECT_FILE }}
      
    - name: EXTRACT AND INCREMENT VERSION
      id: version-update
      run: |
        current_version=$(grep -oP '(?<=<Version>)[^<]+' ${{ env.PROJECT_FILE }})
        IFS='.' read -ra version_parts <<< "$current_version"
        version_parts[2]=$((version_parts[2]+1))
        new_version="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
        sed -i "s/<Version>$current_version<\/Version>/<Version>$new_version<\/Version>/" ${{ env.PROJECT_FILE }}
        echo "::set-output name=new_version::$new_version"
        echo "Updated version to $new_version"

    - name: COMMIT AND PUSH VERSION UPDATE
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git add ${{ env.PROJECT_FILE }}
        git commit -m "Update project version to ${{ steps.version-update.outputs.new_version }}"
        git push
      env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS }}

    - name: BUILD ${{ env.PROJECT_FILE }} ${{ env.BUILD_CONFIGURATION }}
      run: dotnet build ${{ env.PROJECT_FILE }} -c ${{ env.BUILD_CONFIGURATION }}

    - name: TEST ${{ env.TEST_PROJECT_FILE }} ${{ env.BUILD_CONFIGURATION }}
      run: dotnet test ${{ env.TEST_PROJECT_FILE }} -c ${{ env.BUILD_CONFIGURATION }} --no-build

    - name: PACK ${{ env.PROJECT_FILE }}
      run: dotnet pack ${{ env.PROJECT_FILE }} -c ${{ env.BUILD_CONFIGURATION }} --output ${{ env.PACKAGE_DIRECTORY }}

    - name: PUSH
      env: 
        nuget: ${{ env.PACKAGE_DIRECTORY }}*.nupkg
      run: |
        echo "The file path is $nuget"
        dotnet nuget push $nuget --api-key ${{ env.SWEAJ_NUGET_KEY }} --source "${{ env.NUGET_REPOSITORY_URL }}"
